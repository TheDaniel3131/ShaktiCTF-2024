from Crypto.Util.number import inverse, long_to_bytes

# Given values
p = 12183163052748797962152083951276410017023381414297530966097687939312125214962148117236820737625705839607797813446007939630781665285299250570390516148709817
q = 7771332213006128671514628362741773970588675422315769188626146232673657294809145256158466322140793048100178050459366164928658849208228006813771330133382669
ct = 69809574268094587974680690310010875823914402354108791214388914793753290730520176210621110143671156436023479092945510884008537287566990867903409232633006241007449144089984452712221573540394001175526054610509523658488124259372050629488992877535826749460565155712479024148911894543405457084529004738124518126167
e = 65537

# Calculate n and Ï†(n)
n = p * q
phi_n = (p - 1) * (q - 1)

# Calculate the private exponent d
d = inverse(e, phi_n)

# Decrypt the ciphertext
m = pow(ct, d, n)

# Convert the decrypted message back to bytes
original_message = long_to_bytes(m)
print(original_message)
